name: Auto Commit Amazon Price Tracker

on:
    schedule:
        # Run at 9:00 AM and 3:00 PM UTC every day for 8 days
        - cron: "0 9 * * *" # 9:00 AM UTC
        - cron: "0 15 * * *" # 3:00 PM UTC
    workflow_dispatch: # Allow manual triggering

jobs:
    auto-commit:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Configure Git
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

            - name: Auto Commit
              run: |
                  # Get current date to determine which commits to make
                  CURRENT_DATE=$(date +%Y-%m-%d)
                  CURRENT_HOUR=$(date +%H)

                  # Determine commit index based on date and time
                  # We'll spread 16 commits over 8 days, 2 per day
                  DAY_NUMBER=$(( ($(date -d "$CURRENT_DATE" +%s) - $(date -d "2024-09-27" +%s)) / 86400 + 1 ))

                  if [ "$CURRENT_HOUR" = "09" ]; then
                    COMMIT_INDEX=$(( (DAY_NUMBER - 1) * 2 + 1 ))
                  elif [ "$CURRENT_HOUR" = "15" ]; then
                    COMMIT_INDEX=$(( (DAY_NUMBER - 1) * 2 + 2 ))
                  else
                    echo "Not a scheduled time"
                    exit 0
                  fi

                  # Only proceed if we haven't exceeded 16 commits
                  if [ $COMMIT_INDEX -gt 16 ]; then
                    echo "All commits completed"
                    exit 0
                  fi

                  echo "Processing commit $COMMIT_INDEX for day $DAY_NUMBER"

                  # Create basic project structure
                  mkdir -p app/(tabs) app/(auth) components contexts supabase/functions/scrape-amazon supabase/migrations types utils

                  # Create files based on commit index
                  case $COMMIT_INDEX in
                    1)
                      # Initial commit files
                      cat > .gitignore << 'EOF'
                  # Dependencies
                  node_modules/
                  .expo/
                  .expo-shared/

                  # Native
                  *.orig.*
                  *.jks
                  *.p8
                  *.p12
                  *.key
                  *.mobileprovision

                  # Metro
                  .metro-health-check*

                  # Debug
                  npm-debug.*
                  yarn-debug.*
                  yarn-error.*

                  # macOS
                  .DS_Store
                  *.pem

                  # local env files
                  .env*.local

                  # typescript
                  *.tsbuildinfo
                  EOF

                      cat > app-env.d.ts << 'EOF'
                  /// <reference types="expo/types" />

                  // NOTE: This file should not be edited and should be in your .gitignore
                  EOF

                      cat > app.json << 'EOF'
                  {
                    "expo": {
                      "name": "Amazon Price Tracker",
                      "slug": "amazon-price-tracker",
                      "version": "1.0.0",
                      "orientation": "portrait",
                      "icon": "./assets/icon.png",
                      "userInterfaceStyle": "light",
                      "splash": {
                        "image": "./assets/splash.png",
                        "resizeMode": "contain",
                        "backgroundColor": "#ffffff"
                      },
                      "assetBundlePatterns": [
                        "**/*"
                      ],
                      "ios": {
                        "supportsTablet": true
                      },
                      "android": {
                        "adaptiveIcon": {
                          "foregroundImage": "./assets/adaptive-icon.png",
                          "backgroundColor": "#ffffff"
                        }
                      },
                      "web": {
                        "favicon": "./assets/favicon.png"
                      }
                    }
                  }
                  EOF

                      cat > babel.config.js << 'EOF'
                  module.exports = function (api) {
                    api.cache(true);
                    return {
                      presets: ['babel-preset-expo'],
                      plugins: ['nativewind/babel'],
                    };
                  };
                  EOF

                      cat > cesconfig.json << 'EOF'
                  {
                    "extends": "expo/cesconfig.base.json"
                  }
                  EOF

                      cat > global.css << 'EOF'
                  @tailwind base;
                  @tailwind components;
                  @tailwind utilities;
                  EOF

                      cat > metro.config.js << 'EOF'
                  const { getDefaultConfig } = require('expo/metro-config');
                  const { withNativeWind } = require('nativewind/metro');

                  const config = getDefaultConfig(__dirname);

                  module.exports = withNativeWind(config, { input: './global.css' });
                  EOF

                      cat > prettier.config.js << 'EOF'
                  module.exports = {
                    arrowParens: 'avoid',
                    bracketSameLine: true,
                    bracketSpacing: false,
                    singleQuote: true,
                    trailingComma: 'all',
                  };
                  EOF

                      cat > tailwind.config.js << 'EOF'
                  /** @type {import('tailwindcss').Config} */
                  module.exports = {
                    // NOTE: Update this to include the paths to all of your component files.
                    content: [
                      './app/**/*.{js,jsx,ts,tsx}',
                      './components/**/*.{js,jsx,ts,tsx}',
                    ],
                    presets: [require('nativewind/preset')],
                    theme: {
                      extend: {},
                    },
                    plugins: [],
                  };
                  EOF

                      cat > tsconfig.json << 'EOF'
                  {
                    "extends": "expo/tsconfig.base",
                    "compilerOptions": {
                      "strict": true
                    }
                  }
                  EOF
                      ;;
                    2)
                      # Init project and Search box
                      cat > nativewind-env.d.ts << 'EOF'
                  /// <reference types="nativewind/types" />
                  EOF

                      cat > tsconfig.json << 'EOF'
                  {
                    "extends": "expo/tsconfig.base",
                    "compilerOptions": {
                      "strict": true
                    }
                  }
                  EOF
                      ;;
                    3)
                      # Product results page UI
                      cat > app/(tabs)/index.tsx << 'EOF'
                  import { View, Text } from 'react-native';

                  export default function HomeScreen() {
                    return (
                      <View className="flex-1 items-center justify-center">
                        <Text className="text-xl font-bold">Amazon Price Tracker</Text>
                      </View>
                    );
                  }
                  EOF

                      cat > app/(tabs)/search.tsx << 'EOF'
                  import { View, Text } from 'react-native';
                  import SearchBox from '../../components/SearchBox';

                  export default function SearchScreen() {
                    return (
                      <View className="flex-1 p-4">
                        <SearchBox />
                      </View>
                    );
                  }
                  EOF

                      cat > components/ProductCard.tsx << 'EOF'
                  import { View, Text, Image } from 'react-native';

                  interface ProductCardProps {
                    product: {
                      title: string;
                      price: string;
                      image: string;
                    };
                  }

                  export default function ProductCard({ product }: ProductCardProps) {
                    return (
                      <View className="bg-white p-4 rounded-lg shadow-md mb-4">
                        <Image source={{ uri: product.image }} className="w-full h-48 rounded-lg mb-2" />
                        <Text className="text-lg font-semibold mb-2">{product.title}</Text>
                        <Text className="text-xl font-bold text-green-600">{product.price}</Text>
                      </View>
                    );
                  }
                  EOF

                      cat > components/SearchBox.tsx << 'EOF'
                  import { View, TextInput, TouchableOpacity, Text } from 'react-native';
                  import { useState } from 'react';

                  export default function SearchBox() {
                    const [searchQuery, setSearchQuery] = useState('');

                    const handleSearch = () => {
                      // Search logic here
                      console.log('Searching for:', searchQuery);
                    };

                    return (
                      <View className="flex-row items-center space-x-2">
                        <TextInput
                          className="flex-1 border border-gray-300 rounded-lg px-4 py-2"
                          placeholder="Search for products..."
                          value={searchQuery}
                          onChangeText={setSearchQuery}
                        />
                        <TouchableOpacity
                          className="bg-blue-500 px-4 py-2 rounded-lg"
                          onPress={handleSearch}
                        >
                          <Text className="text-white font-semibold">Search</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF
                      ;;
                    4)
                      # Auth flow
                      cat > app/(auth)/login.tsx << 'EOF'
                  import { View, Text, TextInput, TouchableOpacity } from 'react-native';
                  import { useState } from 'react';

                  export default function LoginScreen() {
                    const [email, setEmail] = useState('');
                    const [password, setPassword] = useState('');

                    const handleLogin = () => {
                      // Login logic here
                      console.log('Login:', email);
                    };

                    return (
                      <View className="flex-1 justify-center p-4">
                        <Text className="text-2xl font-bold text-center mb-8">Login</Text>
                        <TextInput
                          className="border border-gray-300 rounded-lg px-4 py-2 mb-4"
                          placeholder="Email"
                          value={email}
                          onChangeText={setEmail}
                        />
                        <TextInput
                          className="border border-gray-300 rounded-lg px-4 py-2 mb-4"
                          placeholder="Password"
                          secureTextEntry
                          value={password}
                          onChangeText={setPassword}
                        />
                        <TouchableOpacity
                          className="bg-blue-500 py-3 rounded-lg"
                          onPress={handleLogin}
                        >
                          <Text className="text-white text-center font-semibold">Login</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF

                      cat > app/(auth)/signup.tsx << 'EOF'
                  import { View, Text, TextInput, TouchableOpacity } from 'react-native';
                  import { useState } from 'react';

                  export default function SignupScreen() {
                    const [email, setEmail] = useState('');
                    const [password, setPassword] = useState('');

                    const handleSignup = () => {
                      // Signup logic here
                      console.log('Signup:', email);
                    };

                    return (
                      <View className="flex-1 justify-center p-4">
                        <Text className="text-2xl font-bold text-center mb-8">Sign Up</Text>
                        <TextInput
                          className="border border-gray-300 rounded-lg px-4 py-2 mb-4"
                          placeholder="Email"
                          value={email}
                          onChangeText={setEmail}
                        />
                        <TextInput
                          className="border border-gray-300 rounded-lg px-4 py-2 mb-4"
                          placeholder="Password"
                          secureTextEntry
                          value={password}
                          onChangeText={setPassword}
                        />
                        <TouchableOpacity
                          className="bg-green-500 py-3 rounded-lg"
                          onPress={handleSignup}
                        >
                          <Text className="text-white text-center font-semibold">Sign Up</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF

                      cat > contexts/AuthContext.tsx << 'EOF'
                  import React, { createContext, useContext, useState, useEffect } from 'react';

                  interface User {
                    id: string;
                    email: string;
                  }

                  interface AuthContextType {
                    user: User | null;
                    login: (email: string, password: string) => Promise<void>;
                    logout: () => void;
                    loading: boolean;
                  }

                  const AuthContext = createContext<AuthContextType | undefined>(undefined);

                  export function AuthProvider({ children }: { children: React.ReactNode }) {
                    const [user, setUser] = useState<User | null>(null);
                    const [loading, setLoading] = useState(true);

                    const login = async (email: string, password: string) => {
                      // Login logic here
                      setUser({ id: '1', email });
                    };

                    const logout = () => {
                      setUser(null);
                    };

                    return (
                      <AuthContext.Provider value={{ user, login, logout, loading }}>
                        {children}
                      </AuthContext.Provider>
                    );
                  }

                  export function useAuth() {
                    const context = useContext(AuthContext);
                    if (context === undefined) {
                      throw new Error('useAuth must be used within an AuthProvider');
                    }
                    return context;
                  }
                  EOF
                      ;;
                    5)
                      # Searches database
                      cat > package.json << 'EOF'
                  {
                    "name": "amazon-price-tracker",
                    "version": "1.0.0",
                    "main": "expo-router/entry",
                    "scripts": {
                      "start": "expo start",
                      "android": "expo start --android",
                      "ios": "expo start --ios",
                      "web": "expo start --web"
                    },
                    "dependencies": {
                      "expo": "~51.0.0",
                      "expo-router": "~3.5.0",
                      "expo-status-bar": "~1.12.0",
                      "react": "18.2.0",
                      "react-native": "0.74.5",
                      "react-native-safe-area-context": "4.10.5",
                      "react-native-screens": "3.31.1",
                      "nativewind": "^2.0.11",
                      "tailwindcss": "3.3.2",
                      "@supabase/supabase-js": "^2.38.0"
                    },
                    "devDependencies": {
                      "@babel/core": "^7.20.0",
                      "@types/react": "~18.2.45",
                      "typescript": "^5.1.3"
                    },
                    "private": true
                  }
                  EOF

                      cat > package-lock.json << 'EOF'
                  {
                    "name": "amazon-price-tracker",
                    "version": "1.0.0",
                    "lockfileVersion": 3,
                    "requires": true,
                    "packages": {
                      "": {
                        "name": "amazon-price-tracker",
                        "version": "1.0.0",
                        "hasInstallScript": false,
                        "dependencies": {
                          "expo": "~51.0.0",
                          "expo-router": "~3.5.0",
                          "expo-status-bar": "~1.12.0",
                          "react": "18.2.0",
                          "react-native": "0.74.5",
                          "react-native-safe-area-context": "4.10.5",
                          "react-native-screens": "3.31.1",
                          "nativewind": "^2.0.11",
                          "tailwindcss": "3.3.2",
                          "@supabase/supabase-js": "^2.38.0"
                        }
                      }
                    }
                  }
                  EOF
                      ;;
                    6)
                      # Edge function for scraping
                      cat > supabase/functions/scrape-amazon/index.ts << 'EOF'
                  import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';

                  serve(async (req) => {
                    const { url } = await req.json();
                    
                    try {
                      // Scraping logic here
                      const response = await fetch(url);
                      const html = await response.text();
                      
                      // Parse HTML and extract product data
                      // This is a simplified example
                      const productData = {
                        title: 'Sample Product',
                        price: '$99.99',
                        image: 'https://example.com/image.jpg'
                      };
                      
                      return new Response(JSON.stringify(productData), {
                        headers: { 'Content-Type': 'application/json' },
                      });
                    } catch (error) {
                      return new Response(JSON.stringify({ error: error.message }), {
                        status: 500,
                        headers: { 'Content-Type': 'application/json' },
                      });
                    }
                  });
                  EOF
                      ;;
                    7)
                      # Realtime subscription for search updates
                      cat > app/(tabs)/search.tsx << 'EOF'
                  import { View, Text } from 'react-native';
                  import SearchBox from '../../components/SearchBox';
                  import { useEffect } from 'react';

                  export default function SearchScreen() {
                    useEffect(() => {
                      // Setup realtime subscription
                      console.log('Setting up realtime subscription');
                    }, []);

                    return (
                      <View className="flex-1 p-4">
                        <SearchBox />
                      </View>
                    );
                  }
                  EOF

                      cat > contexts/AuthContext.tsx << 'EOF'
                  import React, { createContext, useContext, useState, useEffect } from 'react';

                  interface User {
                    id: string;
                    email: string;
                  }

                  interface AuthContextType {
                    user: User | null;
                    login: (email: string, password: string) => Promise<void>;
                    logout: () => void;
                    loading: boolean;
                  }

                  const AuthContext = createContext<AuthContextType | undefined>(undefined);

                  export function AuthProvider({ children }: { children: React.ReactNode }) {
                    const [user, setUser] = useState<User | null>(null);
                    const [loading, setLoading] = useState(true);

                    const login = async (email: string, password: string) => {
                      // Login logic here
                      setUser({ id: '1', email });
                    };

                    const logout = () => {
                      setUser(null);
                    };

                    useEffect(() => {
                      // Setup realtime subscription for auth updates
                      console.log('Auth context initialized');
                    }, []);

                    return (
                      <AuthContext.Provider value={{ user, login, logout, loading }}>
                        {children}
                      </AuthContext.Provider>
                    );
                  }

                  export function useAuth() {
                    const context = useContext(AuthContext);
                    if (context === undefined) {
                      throw new Error('useAuth must be used within an AuthProvider');
                    }
                    return context;
                  }
                  EOF
                      ;;
                    8)
                      # refactor and add types
                      cat > types/index.ts << 'EOF'
                  export interface Product {
                    id: string;
                    title: string;
                    price: number;
                    image: string;
                    url: string;
                    lastUpdated: string;
                  }

                  export interface Search {
                    id: string;
                    query: string;
                    userId: string;
                    createdAt: string;
                    products: Product[];
                  }

                  export interface User {
                    id: string;
                    email: string;
                    createdAt: string;
                  }
                  EOF

                      cat > utils/api.ts << 'EOF'
                  import { supabase } from './constants';

                  export const searchProducts = async (query: string) => {
                    try {
                      const { data, error } = await supabase
                        .from('products')
                        .select('*')
                        .ilike('title', `%${query}%`);
                      
                      if (error) throw error;
                      return data;
                    } catch (error) {
                      console.error('Error searching products:', error);
                      return [];
                    }
                  };

                  export const saveSearch = async (query: string, userId: string) => {
                    try {
                      const { data, error } = await supabase
                        .from('searches')
                        .insert({ query, user_id: userId });
                      
                      if (error) throw error;
                      return data;
                    } catch (error) {
                      console.error('Error saving search:', error);
                      return null;
                    }
                  };
                  EOF

                      cat > utils/constants.ts << 'EOF'
                  import { createClient } from '@supabase/supabase-js';

                  const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;
                  const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;

                  export const supabase = createClient(supabaseUrl, supabaseKey);
                  EOF
                      ;;
                    9)
                      # unique prodct - search relationship items
                      cat > app/(tabs)/search.tsx << 'EOF'
                  import { View, Text } from 'react-native';
                  import SearchBox from '../../components/SearchBox';
                  import { useEffect, useState } from 'react';
                  import { searchProducts } from '../../utils/api';

                  export default function SearchScreen() {
                    const [products, setProducts] = useState([]);

                    useEffect(() => {
                      // Setup realtime subscription
                      console.log('Setting up realtime subscription');
                    }, []);

                    const handleSearch = async (query: string) => {
                      const results = await searchProducts(query);
                      setProducts(results);
                    };

                    return (
                      <View className="flex-1 p-4">
                        <SearchBox onSearch={handleSearch} />
                        {products.map((product) => (
                          <Text key={product.id}>{product.title}</Text>
                        ))}
                      </View>
                    );
                  }
                  EOF

                      cat > components/ProductCard.tsx << 'EOF'
                  import { View, Text, Image, TouchableOpacity } from 'react-native';
                  import { Product } from '../../types';

                  interface ProductCardProps {
                    product: Product;
                    onPress?: () => void;
                  }

                  export default function ProductCard({ product, onPress }: ProductCardProps) {
                    return (
                      <TouchableOpacity onPress={onPress}>
                        <View className="bg-white p-4 rounded-lg shadow-md mb-4">
                          <Image source={{ uri: product.image }} className="w-full h-48 rounded-lg mb-2" />
                          <Text className="text-lg font-semibold mb-2">{product.title}</Text>
                          <Text className="text-xl font-bold text-green-600">${product.price}</Text>
                          <Text className="text-sm text-gray-500">Last updated: {product.lastUpdated}</Text>
                        </View>
                      </TouchableOpacity>
                    );
                  }
                  EOF
                      ;;
                    10)
                      # product snapshot db table for historical prices
                      cat > supabase/migrations/001_create_product_snapshots.sql << 'EOF'
                  -- Create product_snapshots table for historical price tracking
                  CREATE TABLE IF NOT EXISTS product_snapshots (
                    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
                    product_id UUID NOT NULL,
                    price DECIMAL(10,2) NOT NULL,
                    title TEXT,
                    image_url TEXT,
                    amazon_url TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                  );

                  -- Create index for efficient queries
                  CREATE INDEX IF NOT EXISTS idx_product_snapshots_product_id ON product_snapshots(product_id);
                  CREATE INDEX IF NOT EXISTS idx_product_snapshots_created_at ON product_snapshots(created_at);

                  -- Enable Row Level Security
                  ALTER TABLE product_snapshots ENABLE ROW LEVEL SECURITY;

                  -- Create policy for authenticated users
                  CREATE POLICY "Users can view all product snapshots" ON product_snapshots
                    FOR SELECT USING (auth.role() = 'authenticated');
                  EOF
                      ;;
                    11)
                      # render price history (snapshots
                      cat > app/(tabs)/search.tsx << 'EOF'
                  import { View, Text, ScrollView } from 'react-native';
                  import SearchBox from '../../components/SearchBox';
                  import { useEffect, useState } from 'react';
                  import { searchProducts } from '../../utils/api';

                  export default function SearchScreen() {
                    const [products, setProducts] = useState([]);
                    const [priceHistory, setPriceHistory] = useState({});

                    useEffect(() => {
                      // Setup realtime subscription
                      console.log('Setting up realtime subscription');
                    }, []);

                    const handleSearch = async (query: string) => {
                      const results = await searchProducts(query);
                      setProducts(results);
                      
                      // Fetch price history for each product
                      for (const product of results) {
                        // Fetch price history logic here
                        setPriceHistory(prev => ({
                          ...prev,
                          [product.id]: [
                            { price: 99.99, date: '2024-01-01' },
                            { price: 89.99, date: '2024-01-02' }
                          ]
                        }));
                      }
                    };

                    return (
                      <ScrollView className="flex-1 p-4">
                        <SearchBox onSearch={handleSearch} />
                        {products.map((product) => (
                          <View key={product.id} className="mb-4">
                            <Text className="text-lg font-semibold">{product.title}</Text>
                            <Text className="text-xl font-bold text-green-600">${product.price}</Text>
                            {priceHistory[product.id] && (
                              <View>
                                <Text className="text-sm text-gray-600">Price History:</Text>
                                {priceHistory[product.id].map((snapshot, index) => (
                                  <Text key={index} className="text-sm">
                                    {snapshot.date}: ${snapshot.price}
                                  </Text>
                                ))}
                              </View>
                            )}
                          </View>
                        ))}
                      </ScrollView>
                    );
                  }
                  EOF

                      cat > components/ProductCard.tsx << 'EOF'
                  import { View, Text, Image, TouchableOpacity } from 'react-native';
                  import { Product } from '../../types';

                  interface ProductCardProps {
                    product: Product;
                    priceHistory?: Array<{ price: number; date: string }>;
                    onPress?: () => void;
                  }

                  export default function ProductCard({ product, priceHistory, onPress }: ProductCardProps) {
                    return (
                      <TouchableOpacity onPress={onPress}>
                        <View className="bg-white p-4 rounded-lg shadow-md mb-4">
                          <Image source={{ uri: product.image }} className="w-full h-48 rounded-lg mb-2" />
                          <Text className="text-lg font-semibold mb-2">{product.title}</Text>
                          <Text className="text-xl font-bold text-green-600">${product.price}</Text>
                          <Text className="text-sm text-gray-500">Last updated: {product.lastUpdated}</Text>
                          
                          {priceHistory && priceHistory.length > 0 && (
                            <View className="mt-2">
                              <Text className="text-sm font-semibold text-gray-700">Price History:</Text>
                              {priceHistory.slice(0, 3).map((snapshot, index) => (
                                <Text key={index} className="text-xs text-gray-600">
                                  {snapshot.date}: ${snapshot.price}
                                </Text>
                              ))}
                            </View>
                          )}
                        </View>
                      </TouchableOpacity>
                    );
                  }
                  EOF
                      ;;
                    12)
                      # open on amazon button:
                      cat > components/ProductCard.tsx << 'EOF'
                  import { View, Text, Image, TouchableOpacity, Linking } from 'react-native';
                  import { Product } from '../../types';

                  interface ProductCardProps {
                    product: Product;
                    priceHistory?: Array<{ price: number; date: string }>;
                    onPress?: () => void;
                  }

                  export default function ProductCard({ product, priceHistory, onPress }: ProductCardProps) {
                    const openOnAmazon = () => {
                      Linking.openURL(product.url);
                    };

                    return (
                      <View className="bg-white p-4 rounded-lg shadow-md mb-4">
                        <Image source={{ uri: product.image }} className="w-full h-48 rounded-lg mb-2" />
                        <Text className="text-lg font-semibold mb-2">{product.title}</Text>
                        <Text className="text-xl font-bold text-green-600">${product.price}</Text>
                        <Text className="text-sm text-gray-500">Last updated: {product.lastUpdated}</Text>
                        
                        {priceHistory && priceHistory.length > 0 && (
                          <View className="mt-2">
                            <Text className="text-sm font-semibold text-gray-700">Price History:</Text>
                            {priceHistory.slice(0, 3).map((snapshot, index) => (
                              <Text key={index} className="text-xs text-gray-600">
                                {snapshot.date}: ${snapshot.price}
                              </Text>
                            ))}
                          </View>
                        )}
                        
                        <TouchableOpacity
                          className="bg-orange-500 py-2 px-4 rounded-lg mt-3"
                          onPress={openOnAmazon}
                        >
                          <Text className="text-white text-center font-semibold">Open on Amazon</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF
                      ;;
                    13)
                      # track searches UI
                      cat > app/(tabs)/track.tsx << 'EOF'
                  import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
                  import { useState, useEffect } from 'react';

                  export default function TrackScreen() {
                    const [searches, setSearches] = useState([]);

                    useEffect(() => {
                      // Fetch user's saved searches
                      console.log('Fetching saved searches');
                    }, []);

                    return (
                      <ScrollView className="flex-1 p-4">
                        <Text className="text-2xl font-bold mb-4">Tracked Searches</Text>
                        
                        {searches.length === 0 ? (
                          <View className="flex-1 items-center justify-center py-8">
                            <Text className="text-gray-500 text-center">
                              No searches tracked yet.{'\n'}
                              Start searching to track price changes!
                            </Text>
                          </View>
                        ) : (
                          searches.map((search) => (
                            <TouchableOpacity
                              key={search.id}
                              className="bg-white p-4 rounded-lg shadow-md mb-3"
                            >
                              <Text className="text-lg font-semibold">{search.query}</Text>
                              <Text className="text-sm text-gray-500">
                                {search.products?.length || 0} products tracked
                              </Text>
                              <Text className="text-xs text-gray-400">
                                Created: {search.createdAt}
                              </Text>
                            </TouchableOpacity>
                          ))
                        )}
                      </ScrollView>
                    );
                  }
                  EOF
                      ;;
                    14)
                      # scraping cron
                      cat > supabase/functions/scrape-amazon/index.ts << 'EOF'
                  import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
                  import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

                  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
                  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

                  serve(async (req) => {
                    try {
                      const supabase = createClient(supabaseUrl, supabaseServiceKey);
                      
                      // Get all active searches
                      const { data: searches, error: searchesError } = await supabase
                        .from('searches')
                        .select('*')
                        .eq('active', true);
                      
                      if (searchesError) throw searchesError;
                      
                      // Process each search
                      for (const search of searches || []) {
                        try {
                          // Scrape Amazon for the search query
                          const response = await fetch(`https://amazon.com/s?k=${encodeURIComponent(search.query)}`);
                          const html = await response.text();
                          
                          // Parse HTML and extract product data
                          // This is a simplified example
                          const products = [
                            {
                              title: 'Sample Product 1',
                              price: 99.99,
                              image: 'https://example.com/image1.jpg',
                              url: 'https://amazon.com/product1'
                            }
                          ];
                          
                          // Save products to database
                          for (const product of products) {
                            const { error: productError } = await supabase
                              .from('products')
                              .upsert({
                                title: product.title,
                                price: product.price,
                                image: product.image,
                                url: product.url,
                                search_id: search.id
                              });
                            
                            if (productError) console.error('Error saving product:', productError);
                          }
                          
                        } catch (error) {
                          console.error(`Error processing search ${search.id}:`, error);
                        }
                      }
                      
                      return new Response(JSON.stringify({ success: true }), {
                        headers: { 'Content-Type': 'application/json' },
                      });
                    } catch (error) {
                      return new Response(JSON.stringify({ error: error.message }), {
                        status: 500,
                        headers: { 'Content-Type': 'application/json' },
                      });
                    }
                  });
                  EOF
                      ;;
                    15)
                      # scraping cron daily
                      cat > runScrapingCron.sql << 'EOF'
                  -- Daily scraping cron job
                  -- This SQL script is used to trigger the scraping function daily

                  -- Create a function to run the scraping
                  CREATE OR REPLACE FUNCTION run_daily_scraping()
                  RETURNS void AS $$
                  BEGIN
                    -- Call the edge function for scraping
                    PERFORM net.http_post(
                      url := 'https://your-project.supabase.co/functions/v1/scrape-amazon',
                      headers := '{"Content-Type": "application/json"}'::jsonb,
                      body := '{}'::jsonb
                    );
                  END;
                  $$ LANGUAGE plpgsql;

                  -- Schedule the function to run daily at 6 AM UTC
                  -- Note: This requires pg_cron extension to be enabled
                  SELECT cron.schedule('daily-scraping', '0 6 * * *', 'SELECT run_daily_scraping();');
                  EOF
                      ;;
                    16)
                      # price drops checker
                      cat > app/(tabs)/index.tsx << 'EOF'
                  import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
                  import { useState, useEffect } from 'react';

                  export default function HomeScreen() {
                    const [priceDrops, setPriceDrops] = useState([]);

                    useEffect(() => {
                      // Fetch recent price drops
                      console.log('Fetching price drops');
                    }, []);

                    return (
                      <ScrollView className="flex-1 p-4">
                        <Text className="text-2xl font-bold mb-4">Price Drops</Text>
                        
                        {priceDrops.length === 0 ? (
                          <View className="flex-1 items-center justify-center py-8">
                            <Text className="text-gray-500 text-center">
                              No price drops detected yet.{'\n'}
                              Check back later for updates!
                            </Text>
                          </View>
                        ) : (
                          priceDrops.map((drop) => (
                            <TouchableOpacity
                              key={drop.id}
                              className="bg-white p-4 rounded-lg shadow-md mb-3"
                            >
                              <Text className="text-lg font-semibold">{drop.title}</Text>
                              <View className="flex-row justify-between items-center mt-2">
                                <Text className="text-sm text-gray-500">Previous: ${drop.oldPrice}</Text>
                                <Text className="text-lg font-bold text-green-600">${drop.newPrice}</Text>
                              </View>
                              <Text className="text-xs text-gray-400">
                                Drop detected: {drop.detectedAt}
                              </Text>
                            </TouchableOpacity>
                          ))
                        )}
                      </ScrollView>
                    );
                  }
                  EOF

                      cat > app/(tabs)/search.tsx << 'EOF'
                  import { View, Text, ScrollView } from 'react-native';
                  import SearchBox from '../../components/SearchBox';
                  import ProductCard from '../../components/ProductCard';
                  import { useEffect, useState } from 'react';
                  import { searchProducts } from '../../utils/api';
                  import { Product } from '../../types';

                  export default function SearchScreen() {
                    const [products, setProducts] = useState<Product[]>([]);
                    const [priceHistory, setPriceHistory] = useState<Record<string, Array<{ price: number; date: string }>>>({});

                    useEffect(() => {
                      // Setup realtime subscription for price updates
                      console.log('Setting up realtime subscription for price drops');
                    }, []);

                    const handleSearch = async (query: string) => {
                      const results = await searchProducts(query);
                      setProducts(results);
                      
                      // Fetch price history for each product
                      for (const product of results) {
                        // Fetch price history logic here
                        setPriceHistory(prev => ({
                          ...prev,
                          [product.id]: [
                            { price: 99.99, date: '2024-01-01' },
                            { price: 89.99, date: '2024-01-02' }
                          ]
                        }));
                      }
                    };

                    return (
                      <ScrollView className="flex-1 p-4">
                        <SearchBox onSearch={handleSearch} />
                        {products.map((product) => (
                          <ProductCard
                            key={product.id}
                            product={product}
                            priceHistory={priceHistory[product.id]}
                          />
                        ))}
                      </ScrollView>
                    );
                  }
                  EOF

                      cat > app/(tabs)/track.tsx << 'EOF'
                  import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
                  import { useState, useEffect } from 'react';

                  export default function TrackScreen() {
                    const [searches, setSearches] = useState([]);
                    const [priceAlerts, setPriceAlerts] = useState([]);

                    useEffect(() => {
                      // Fetch user's saved searches and price alerts
                      console.log('Fetching tracked searches and price alerts');
                    }, []);

                    return (
                      <ScrollView className="flex-1 p-4">
                        <Text className="text-2xl font-bold mb-4">Tracked Searches</Text>
                        
                        {searches.length === 0 ? (
                          <View className="flex-1 items-center justify-center py-8">
                            <Text className="text-gray-500 text-center">
                              No searches tracked yet.{'\n'}
                              Start searching to track price changes!
                            </Text>
                          </View>
                        ) : (
                          searches.map((search) => (
                            <TouchableOpacity
                              key={search.id}
                              className="bg-white p-4 rounded-lg shadow-md mb-3"
                            >
                              <Text className="text-lg font-semibold">{search.query}</Text>
                              <Text className="text-sm text-gray-500">
                                {search.products?.length || 0} products tracked
                              </Text>
                              <Text className="text-xs text-gray-400">
                                Created: {search.createdAt}
                              </Text>
                            </TouchableOpacity>
                          ))
                        )}
                        
                        {priceAlerts.length > 0 && (
                          <View className="mt-6">
                            <Text className="text-xl font-bold mb-4">Price Alerts</Text>
                            {priceAlerts.map((alert) => (
                              <View key={alert.id} className="bg-yellow-50 p-4 rounded-lg mb-3">
                                <Text className="text-lg font-semibold">{alert.productTitle}</Text>
                                <Text className="text-sm text-gray-600">
                                  Price dropped to ${alert.newPrice} (was ${alert.oldPrice})
                                </Text>
                              </View>
                            ))}
                          </View>
                        )}
                      </ScrollView>
                    );
                  }
                  EOF

                      cat > components/ProductCard.tsx << 'EOF'
                  import { View, Text, Image, TouchableOpacity, Linking } from 'react-native';
                  import { Product } from '../../types';

                  interface ProductCardProps {
                    product: Product;
                    priceHistory?: Array<{ price: number; date: string }>;
                    onPress?: () => void;
                  }

                  export default function ProductCard({ product, priceHistory, onPress }: ProductCardProps) {
                    const openOnAmazon = () => {
                      Linking.openURL(product.url);
                    };

                    const hasPriceDrop = priceHistory && priceHistory.length > 1 && 
                      priceHistory[0].price < priceHistory[1].price;

                    return (
                      <View className={`p-4 rounded-lg shadow-md mb-4 ${hasPriceDrop ? 'bg-green-50 border border-green-200' : 'bg-white'}`}>
                        {hasPriceDrop && (
                          <View className="bg-green-500 py-1 px-2 rounded-full mb-2 self-start">
                            <Text className="text-white text-xs font-bold">PRICE DROP!</Text>
                          </View>
                        )}
                        
                        <Image source={{ uri: product.image }} className="w-full h-48 rounded-lg mb-2" />
                        <Text className="text-lg font-semibold mb-2">{product.title}</Text>
                        <Text className="text-xl font-bold text-green-600">${product.price}</Text>
                        <Text className="text-sm text-gray-500">Last updated: {product.lastUpdated}</Text>
                        
                        {priceHistory && priceHistory.length > 0 && (
                          <View className="mt-2">
                            <Text className="text-sm font-semibold text-gray-700">Price History:</Text>
                            {priceHistory.slice(0, 3).map((snapshot, index) => (
                              <Text key={index} className="text-xs text-gray-600">
                                {snapshot.date}: ${snapshot.price}
                              </Text>
                            ))}
                          </View>
                        )}
                        
                        <TouchableOpacity
                          className="bg-orange-500 py-2 px-4 rounded-lg mt-3"
                          onPress={openOnAmazon}
                        >
                          <Text className="text-white text-center font-semibold">Open on Amazon</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF

                      cat > components/SearchBox.tsx << 'EOF'
                  import { View, TextInput, TouchableOpacity, Text } from 'react-native';
                  import { useState } from 'react';

                  interface SearchBoxProps {
                    onSearch?: (query: string) => void;
                  }

                  export default function SearchBox({ onSearch }: SearchBoxProps) {
                    const [searchQuery, setSearchQuery] = useState('');

                    const handleSearch = () => {
                      if (onSearch) {
                        onSearch(searchQuery);
                      }
                      console.log('Searching for:', searchQuery);
                    };

                    return (
                      <View className="flex-row items-center space-x-2 mb-4">
                        <TextInput
                          className="flex-1 border border-gray-300 rounded-lg px-4 py-2"
                          placeholder="Search for products..."
                          value={searchQuery}
                          onChangeText={setSearchQuery}
                        />
                        <TouchableOpacity
                          className="bg-blue-500 px-4 py-2 rounded-lg"
                          onPress={handleSearch}
                        >
                          <Text className="text-white font-semibold">Search</Text>
                        </TouchableOpacity>
                      </View>
                    );
                  }
                  EOF

                      cat > contexts/AuthContext.tsx << 'EOF'
                  import React, { createContext, useContext, useState, useEffect } from 'react';
                  import { supabase } from '../utils/constants';

                  interface User {
                    id: string;
                    email: string;
                  }

                  interface AuthContextType {
                    user: User | null;
                    login: (email: string, password: string) => Promise<void>;
                    logout: () => void;
                    loading: boolean;
                  }

                  const AuthContext = createContext<AuthContextType | undefined>(undefined);

                  export function AuthProvider({ children }: { children: React.ReactNode }) {
                    const [user, setUser] = useState<User | null>(null);
                    const [loading, setLoading] = useState(true);

                    useEffect(() => {
                      // Check for existing session
                      const getSession = async () => {
                        const { data: { session } } = await supabase.auth.getSession();
                        if (session?.user) {
                          setUser({ id: session.user.id, email: session.user.email! });
                        }
                        setLoading(false);
                      };

                      getSession();

                      // Listen for auth changes
                      const { data: { subscription } } = supabase.auth.onAuthStateChange(
                        async (event, session) => {
                          if (session?.user) {
                            setUser({ id: session.user.id, email: session.user.email! });
                          } else {
                            setUser(null);
                          }
                          setLoading(false);
                        }
                      );

                      return () => subscription.unsubscribe();
                    }, []);

                    const login = async (email: string, password: string) => {
                      const { error } = await supabase.auth.signInWithPassword({
                        email,
                        password,
                      });
                      if (error) throw error;
                    };

                    const logout = async () => {
                      const { error } = await supabase.auth.signOut();
                      if (error) throw error;
                    };

                    return (
                      <AuthContext.Provider value={{ user, login, logout, loading }}>
                        {children}
                      </AuthContext.Provider>
                    );
                  }

                  export function useAuth() {
                    const context = useContext(AuthContext);
                    if (context === undefined) {
                      throw new Error('useAuth must be used within an AuthProvider');
                    }
                    return context;
                  }
                  EOF

                      cat > supabase/functions/scrape-amazon/index.ts << 'EOF'
                  import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
                  import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

                  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
                  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

                  serve(async (req) => {
                    try {
                      const supabase = createClient(supabaseUrl, supabaseServiceKey);
                      
                      // Get all active searches
                      const { data: searches, error: searchesError } = await supabase
                        .from('searches')
                        .select('*')
                        .eq('active', true);
                      
                      if (searchesError) throw searchesError;
                      
                      let processedCount = 0;
                      let priceDropsDetected = 0;
                      
                      // Process each search
                      for (const search of searches || []) {
                        try {
                          // Scrape Amazon for the search query
                          const response = await fetch(`https://amazon.com/s?k=${encodeURIComponent(search.query)}`);
                          const html = await response.text();
                          
                          // Parse HTML and extract product data
                          // This is a simplified example
                          const products = [
                            {
                              title: 'Sample Product 1',
                              price: 89.99,
                              image: 'https://example.com/image1.jpg',
                              url: 'https://amazon.com/product1'
                            }
                          ];
                          
                          // Save products to database and check for price drops
                          for (const product of products) {
                            // Get previous price
                            const { data: existingProduct } = await supabase
                              .from('products')
                              .select('price')
                              .eq('url', product.url)
                              .single();
                            
                            const { error: productError } = await supabase
                              .from('products')
                              .upsert({
                                title: product.title,
                                price: product.price,
                                image: product.image,
                                url: product.url,
                                search_id: search.id
                              });
                            
                            if (productError) {
                              console.error('Error saving product:', productError);
                              continue;
                            }
                            
                            // Check for price drop
                            if (existingProduct && existingProduct.price > product.price) {
                              // Save price drop alert
                              await supabase
                                .from('price_alerts')
                                .insert({
                                  product_url: product.url,
                                  old_price: existingProduct.price,
                                  new_price: product.price,
                                  search_id: search.id
                                });
                              
                              priceDropsDetected++;
                            }
                            
                            // Save price snapshot
                            await supabase
                              .from('product_snapshots')
                              .insert({
                                product_id: product.url, // Using URL as ID for simplicity
                                price: product.price,
                                title: product.title,
                                image_url: product.image,
                                amazon_url: product.url
                              });
                          }
                          
                          processedCount++;
                          
                        } catch (error) {
                          console.error(`Error processing search ${search.id}:`, error);
                        }
                      }
                      
                      return new Response(JSON.stringify({ 
                        success: true, 
                        processed: processedCount,
                        priceDrops: priceDropsDetected
                      }), {
                        headers: { 'Content-Type': 'application/json' },
                      });
                    } catch (error) {
                      return new Response(JSON.stringify({ error: error.message }), {
                        status: 500,
                        headers: { 'Content-Type': 'application/json' },
                      });
                    }
                  });
                  EOF

                      cat > supabase/migrations/002_create_price_alerts.sql << 'EOF'
                  -- Create price_alerts table for tracking price drops
                  CREATE TABLE IF NOT EXISTS price_alerts (
                    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
                    product_url TEXT NOT NULL,
                    old_price DECIMAL(10,2) NOT NULL,
                    new_price DECIMAL(10,2) NOT NULL,
                    search_id UUID REFERENCES searches(id),
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                  );

                  -- Create index for efficient queries
                  CREATE INDEX IF NOT EXISTS idx_price_alerts_product_url ON price_alerts(product_url);
                  CREATE INDEX IF NOT EXISTS idx_price_alerts_created_at ON price_alerts(created_at);

                  -- Enable Row Level Security
                  ALTER TABLE price_alerts ENABLE ROW LEVEL SECURITY;

                  -- Create policy for authenticated users
                  CREATE POLICY "Users can view their price alerts" ON price_alerts
                    FOR SELECT USING (auth.role() = 'authenticated');
                  EOF

                      cat > types/index.ts << 'EOF'
                  export interface Product {
                    id: string;
                    title: string;
                    price: number;
                    image: string;
                    url: string;
                    lastUpdated: string;
                  }

                  export interface Search {
                    id: string;
                    query: string;
                    userId: string;
                    createdAt: string;
                    products: Product[];
                    active: boolean;
                  }

                  export interface User {
                    id: string;
                    email: string;
                    createdAt: string;
                  }

                  export interface PriceAlert {
                    id: string;
                    productUrl: string;
                    oldPrice: number;
                    newPrice: number;
                    searchId: string;
                    createdAt: string;
                  }

                  export interface ProductSnapshot {
                    id: string;
                    productId: string;
                    price: number;
                    title: string;
                    imageUrl: string;
                    amazonUrl: string;
                    createdAt: string;
                  }
                  EOF

                      cat > utils/api.ts << 'EOF'
                  import { supabase } from './constants';
                  import { Product, Search, PriceAlert } from '../types';

                  export const searchProducts = async (query: string): Promise<Product[]> => {
                    try {
                      const { data, error } = await supabase
                        .from('products')
                        .select('*')
                        .ilike('title', `%${query}%`);
                      
                      if (error) throw error;
                      return data || [];
                    } catch (error) {
                      console.error('Error searching products:', error);
                      return [];
                    }
                  };

                  export const saveSearch = async (query: string, userId: string): Promise<Search | null> => {
                    try {
                      const { data, error } = await supabase
                        .from('searches')
                        .insert({ query, user_id: userId, active: true })
                        .select()
                        .single();
                      
                      if (error) throw error;
                      return data;
                    } catch (error) {
                      console.error('Error saving search:', error);
                      return null;
                    }
                  };

                  export const getPriceAlerts = async (userId: string): Promise<PriceAlert[]> => {
                    try {
                      const { data, error } = await supabase
                        .from('price_alerts')
                        .select('*')
                        .order('created_at', { ascending: false });
                      
                      if (error) throw error;
                      return data || [];
                    } catch (error) {
                      console.error('Error fetching price alerts:', error);
                      return [];
                    }
                  };

                  export const getProductPriceHistory = async (productUrl: string) => {
                    try {
                      const { data, error } = await supabase
                        .from('product_snapshots')
                        .select('*')
                        .eq('amazon_url', productUrl)
                        .order('created_at', { ascending: false });
                      
                      if (error) throw error;
                      return data || [];
                    } catch (error) {
                      console.error('Error fetching price history:', error);
                      return [];
                    }
                  };
                  EOF

                      cat > utils/constants.ts << 'EOF'
                  import { createClient } from '@supabase/supabase-js';

                  const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;
                  const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;

                  export const supabase = createClient(supabaseUrl, supabaseKey);
                  EOF
                      ;;
                  esac

                  # Add and commit the files
                  git add .
                  git commit -m "$COMMIT_MSG"

                  echo "Committed: $COMMIT_MSG"

            - name: Push changes
              run: |
                  git push origin main
